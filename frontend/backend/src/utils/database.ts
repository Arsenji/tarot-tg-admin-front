import mongoose from 'mongoose';

const connectDB = async (): Promise<void> => {
  try {
    const mongoURI = process.env.MONGODB_URI || 'mongodb://localhost:27017/taro-tg-app';
    
    console.log(`üîó Attempting to connect to MongoDB...`);
    console.log(`üìç Environment: ${process.env.NODE_ENV}`);
    console.log(`üîó URI: ${mongoURI.replace(/\/\/.*@/, '//***:***@')}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ placeholder –≤ –ø–∞—Ä–æ–ª–µ
    if (mongoURI.includes('<db_password>')) {
      console.error('‚ùå MongoDB URI contains placeholder password!');
      console.error('üí° Please set the correct MONGODB_URI environment variable on Render.com');
      throw new Error('MongoDB URI contains placeholder password');
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è production
    const options = {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 15000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
      socketTimeoutMS: 45000,
      connectTimeoutMS: 15000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
      bufferCommands: false,
      retryWrites: true,
      retryReads: true,
      heartbeatFrequencyMS: 10000,
    };
    
    console.log('‚è≥ Connecting with options:', {
      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,
      connectTimeoutMS: options.connectTimeoutMS,
      maxPoolSize: options.maxPoolSize
    });
    
    await mongoose.connect(mongoURI, options);
    
    console.log('‚úÖ MongoDB connected successfully');
    console.log(`üìä Connection state: ${mongoose.connection.readyState}`);
    console.log(`üè∑Ô∏è Database name: ${mongoose.connection.db?.databaseName}`);
    
    // Handle connection events
    mongoose.connection.on('error', (err) => {
      console.error('‚ùå MongoDB connection error:', err);
    });
    
    mongoose.connection.on('disconnected', () => {
      console.log('‚ö†Ô∏è MongoDB disconnected - connection lost');
      console.log(`üìä Connection state: ${mongoose.connection.readyState}`);
    });
    
    mongoose.connection.on('reconnected', () => {
      console.log('‚úÖ MongoDB reconnected successfully');
      console.log(`üìä Connection state: ${mongoose.connection.readyState}`);
    });
    
    // Graceful shutdown
    process.on('SIGINT', async () => {
      await mongoose.connection.close();
      console.log('üîå MongoDB connection closed through app termination');
      process.exit(0);
    });
    
  } catch (error: any) {
    console.error('‚ùå MongoDB connection failed:', error);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
    if (error.code === 'ENOTFOUND') {
      console.error('üîç DNS Error detected:');
      console.error('   - MongoDB Atlas cluster may be paused or deleted');
      console.error('   - Check your MongoDB Atlas dashboard');
      console.error('   - Verify cluster name and connection string');
    } else if (error.code === 'ECONNREFUSED') {
      console.error('üîç Connection Refused:');
      console.error('   - Network access not configured for Render.com IPs');
      console.error('   - Add 0.0.0.0/0 to Network Access in MongoDB Atlas');
    } else if (error.code === 'EAUTH') {
      console.error('üîç Authentication Error:');
      console.error('   - Username or password incorrect');
      console.error('   - Database user may not exist or have wrong permissions');
    }
    
    // –í production –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è fallback, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
    if (process.env.NODE_ENV === 'production') {
      console.error('üí• Production MongoDB connection failed. Please check your MongoDB Atlas configuration.');
      console.error('üí° Make sure:');
      console.error('   - MONGODB_URI is set correctly');
      console.error('   - MongoDB Atlas cluster is running');
      console.error('   - Network access is configured for Render.com');
      console.error('   - Database user has proper permissions');
      console.error('   - Cluster is not paused');
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Render.com - –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ MongoDB
      if (process.env.ALLOW_NO_MONGODB === 'true') {
        console.warn('‚ö†Ô∏è Continuing without MongoDB (ALLOW_NO_MONGODB=true)');
        console.warn('üìù MongoDB features will be disabled:');
        console.warn('   - User authentication');
        console.warn('   - Reading history');
        console.warn('   - Clarifying questions');
        console.warn('   - Payment tracking');
        console.warn('üí° To enable MongoDB:');
        console.warn('   1. Check MongoDB Atlas dashboard');
        console.warn('   2. Ensure cluster is running (not paused)');
        console.warn('   3. Verify connection string');
        console.warn('   4. Set ALLOW_NO_MONGODB=false');
        return;
      }
    }
    
    process.exit(1);
  }
};

export { connectDB };